// Generated by Dagger (https://dagger.dev).
package grand.app.aber_provider.base;

import dagger.internal.DoubleCheck;
import grand.app.aber_provider.activity.BaseActivity;
import grand.app.aber_provider.activity.MainActivity;
import grand.app.aber_provider.activity.MainActivity_MembersInjector;
import grand.app.aber_provider.connection.Api;
import grand.app.aber_provider.connection.ConnectionHelper;
import grand.app.aber_provider.connection.ConnectionHelper_Factory;
import grand.app.aber_provider.connection.ConnectionModule;
import grand.app.aber_provider.connection.ConnectionModule_WebServiceFactory;
import grand.app.aber_provider.pages.appWallet.AppWalletFragment;
import grand.app.aber_provider.pages.appWallet.AppWalletFragment_MembersInjector;
import grand.app.aber_provider.pages.appWallet.viewModels.AppWalletViewModel;
import grand.app.aber_provider.pages.appWallet.viewModels.AppWalletViewModel_Factory;
import grand.app.aber_provider.pages.appWallet.viewModels.AppWalletViewModel_MembersInjector;
import grand.app.aber_provider.pages.auth.changePassword.ChangePasswordFragment;
import grand.app.aber_provider.pages.auth.changePassword.ChangePasswordFragment_MembersInjector;
import grand.app.aber_provider.pages.auth.changePassword.ChangePasswordViewModel;
import grand.app.aber_provider.pages.auth.changePassword.ChangePasswordViewModel_Factory;
import grand.app.aber_provider.pages.auth.changePassword.ChangePasswordViewModel_MembersInjector;
import grand.app.aber_provider.pages.auth.confirmCode.ConfirmCodeFragment;
import grand.app.aber_provider.pages.auth.confirmCode.ConfirmCodeFragment_MembersInjector;
import grand.app.aber_provider.pages.auth.confirmCode.ConfirmViewModel;
import grand.app.aber_provider.pages.auth.confirmCode.ConfirmViewModel_Factory;
import grand.app.aber_provider.pages.auth.confirmCode.ConfirmViewModel_MembersInjector;
import grand.app.aber_provider.pages.auth.countries.CountriesFragment;
import grand.app.aber_provider.pages.auth.countries.CountriesFragment_MembersInjector;
import grand.app.aber_provider.pages.auth.countries.viewModels.CountriesViewModel;
import grand.app.aber_provider.pages.auth.countries.viewModels.CountriesViewModel_Factory;
import grand.app.aber_provider.pages.auth.countries.viewModels.CountriesViewModel_MembersInjector;
import grand.app.aber_provider.pages.auth.forgetPassword.ForgetPasswordFragment;
import grand.app.aber_provider.pages.auth.forgetPassword.ForgetPasswordFragment_MembersInjector;
import grand.app.aber_provider.pages.auth.forgetPassword.ForgetPasswordViewModel;
import grand.app.aber_provider.pages.auth.forgetPassword.ForgetPasswordViewModel_Factory;
import grand.app.aber_provider.pages.auth.forgetPassword.ForgetPasswordViewModel_MembersInjector;
import grand.app.aber_provider.pages.auth.login.LoginFragment;
import grand.app.aber_provider.pages.auth.login.LoginFragment_MembersInjector;
import grand.app.aber_provider.pages.auth.login.LoginViewModel;
import grand.app.aber_provider.pages.auth.login.LoginViewModel_Factory;
import grand.app.aber_provider.pages.auth.login.LoginViewModel_MembersInjector;
import grand.app.aber_provider.pages.auth.register.RegisterDocumentsFragment;
import grand.app.aber_provider.pages.auth.register.RegisterDocumentsFragment_MembersInjector;
import grand.app.aber_provider.pages.auth.register.RegisterFragment;
import grand.app.aber_provider.pages.auth.register.RegisterFragment_MembersInjector;
import grand.app.aber_provider.pages.auth.register.RegisterServicesFragment;
import grand.app.aber_provider.pages.auth.register.RegisterServicesFragment_MembersInjector;
import grand.app.aber_provider.pages.auth.register.RegisterViewModel;
import grand.app.aber_provider.pages.auth.register.RegisterViewModel_Factory;
import grand.app.aber_provider.pages.auth.register.RegisterViewModel_MembersInjector;
import grand.app.aber_provider.pages.home.HomeFragment;
import grand.app.aber_provider.pages.home.HomeFragment_MembersInjector;
import grand.app.aber_provider.pages.home.viewModels.HomeViewModels;
import grand.app.aber_provider.pages.home.viewModels.HomeViewModels_Factory;
import grand.app.aber_provider.pages.home.viewModels.HomeViewModels_MembersInjector;
import grand.app.aber_provider.pages.myOrders.MyServicesOrdersFragment;
import grand.app.aber_provider.pages.myOrders.MyServicesOrdersFragment_MembersInjector;
import grand.app.aber_provider.pages.notifications.NotificationsFragment;
import grand.app.aber_provider.pages.notifications.NotificationsFragment_MembersInjector;
import grand.app.aber_provider.pages.notifications.viewModels.NotificationsViewModels;
import grand.app.aber_provider.pages.notifications.viewModels.NotificationsViewModels_Factory;
import grand.app.aber_provider.pages.notifications.viewModels.NotificationsViewModels_MembersInjector;
import grand.app.aber_provider.pages.onBoard.OnBoardFragment;
import grand.app.aber_provider.pages.onBoard.OnBoardFragment_MembersInjector;
import grand.app.aber_provider.pages.packages.PackagesFragment;
import grand.app.aber_provider.pages.packages.PackagesFragment_MembersInjector;
import grand.app.aber_provider.pages.packages.viewModels.PackagesViewModels;
import grand.app.aber_provider.pages.packages.viewModels.PackagesViewModels_Factory;
import grand.app.aber_provider.pages.packages.viewModels.PackagesViewModels_MembersInjector;
import grand.app.aber_provider.pages.profile.EditProfileFragment;
import grand.app.aber_provider.pages.profile.EditProfileFragment_MembersInjector;
import grand.app.aber_provider.pages.profile.viewModels.EditProfileViewModel;
import grand.app.aber_provider.pages.profile.viewModels.EditProfileViewModel_Factory;
import grand.app.aber_provider.pages.profile.viewModels.EditProfileViewModel_MembersInjector;
import grand.app.aber_provider.pages.profile.viewModels.ProfileViewModels;
import grand.app.aber_provider.pages.profile.viewModels.ProfileViewModels_Factory;
import grand.app.aber_provider.pages.profile.viewModels.ProfileViewModels_MembersInjector;
import grand.app.aber_provider.pages.settings.AboutAppFragment;
import grand.app.aber_provider.pages.settings.AboutAppFragment_MembersInjector;
import grand.app.aber_provider.pages.settings.ContactUsFragment;
import grand.app.aber_provider.pages.settings.ContactUsFragment_MembersInjector;
import grand.app.aber_provider.pages.settings.LangFragment;
import grand.app.aber_provider.pages.settings.LangFragment_MembersInjector;
import grand.app.aber_provider.pages.settings.MyAccountSettingsFragment;
import grand.app.aber_provider.pages.settings.MyAccountSettingsFragment_MembersInjector;
import grand.app.aber_provider.pages.settings.SocialMedia;
import grand.app.aber_provider.pages.settings.SocialMedia_MembersInjector;
import grand.app.aber_provider.pages.settings.TermsFragment;
import grand.app.aber_provider.pages.settings.TermsFragment_MembersInjector;
import grand.app.aber_provider.pages.settings.viewModels.MyAccountSettingsViewModel;
import grand.app.aber_provider.pages.settings.viewModels.MyAccountSettingsViewModel_Factory;
import grand.app.aber_provider.pages.settings.viewModels.MyAccountSettingsViewModel_MembersInjector;
import grand.app.aber_provider.pages.settings.viewModels.SettingsViewModel;
import grand.app.aber_provider.pages.settings.viewModels.SettingsViewModel_Factory;
import grand.app.aber_provider.pages.settings.viewModels.SettingsViewModel_MembersInjector;
import grand.app.aber_provider.pages.splash.SplashFragment;
import grand.app.aber_provider.pages.splash.SplashFragment_MembersInjector;
import grand.app.aber_provider.pages.splash.SplashViewModel;
import grand.app.aber_provider.pages.splash.SplashViewModel_Factory;
import grand.app.aber_provider.pages.splash.SplashViewModel_MembersInjector;
import grand.app.aber_provider.repository.AuthRepository;
import grand.app.aber_provider.repository.AuthRepository_Factory;
import grand.app.aber_provider.repository.PostRepository;
import grand.app.aber_provider.repository.PostRepository_Factory;
import grand.app.aber_provider.repository.SettingsRepository;
import grand.app.aber_provider.repository.SettingsRepository_Factory;
import grand.app.aber_provider.utils.locations.MapAddressActivity;
import grand.app.aber_provider.utils.locations.MapAddressActivity_MembersInjector;
import grand.app.aber_provider.utils.locations.MapAddressViewModel;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerIApplicationComponent implements IApplicationComponent {
  private Provider<Api> webServiceProvider;

  private Provider<ConnectionHelper> connectionHelperProvider;

  private Provider<PostRepository> postRepositoryProvider;

  private Provider<AuthRepository> authRepositoryProvider;

  private Provider<SettingsRepository> settingsRepositoryProvider;

  private DaggerIApplicationComponent(ConnectionModule connectionModuleParam) {

    initialize(connectionModuleParam);
  }

  public static IApplicationComponent.Builder builder() {
    return new Builder();
  }

  public static IApplicationComponent create() {
    return new Builder().build();
  }

  private HomeViewModels homeViewModels() {
    return injectHomeViewModels(HomeViewModels_Factory.newInstance(postRepositoryProvider.get()));
  }

  private SplashViewModel splashViewModel() {
    return injectSplashViewModel(SplashViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  private LoginViewModel loginViewModel() {
    return injectLoginViewModel(LoginViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  private ForgetPasswordViewModel forgetPasswordViewModel() {
    return injectForgetPasswordViewModel(ForgetPasswordViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  private ConfirmViewModel confirmViewModel() {
    return injectConfirmViewModel(ConfirmViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  private ChangePasswordViewModel changePasswordViewModel() {
    return injectChangePasswordViewModel(ChangePasswordViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  private RegisterViewModel registerViewModel() {
    return injectRegisterViewModel(RegisterViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  private NotificationsViewModels notificationsViewModels() {
    return injectNotificationsViewModels(NotificationsViewModels_Factory.newInstance(settingsRepositoryProvider.get()));
  }

  private MyAccountSettingsViewModel myAccountSettingsViewModel() {
    return injectMyAccountSettingsViewModel(MyAccountSettingsViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  private EditProfileViewModel editProfileViewModel() {
    return injectEditProfileViewModel(EditProfileViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  private ProfileViewModels profileViewModels() {
    return injectProfileViewModels(ProfileViewModels_Factory.newInstance(postRepositoryProvider.get()));
  }

  private SettingsViewModel settingsViewModel() {
    return injectSettingsViewModel(SettingsViewModel_Factory.newInstance(settingsRepositoryProvider.get()));
  }

  private CountriesViewModel countriesViewModel() {
    return injectCountriesViewModel(CountriesViewModel_Factory.newInstance(authRepositoryProvider.get()));
  }

  private PackagesViewModels packagesViewModels() {
    return injectPackagesViewModels(PackagesViewModels_Factory.newInstance(postRepositoryProvider.get()));
  }

  private AppWalletViewModel appWalletViewModel() {
    return injectAppWalletViewModel(AppWalletViewModel_Factory.newInstance(settingsRepositoryProvider.get()));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ConnectionModule connectionModuleParam) {
    this.webServiceProvider = DoubleCheck.provider(ConnectionModule_WebServiceFactory.create(connectionModuleParam));
    this.connectionHelperProvider = DoubleCheck.provider(ConnectionHelper_Factory.create(webServiceProvider, webServiceProvider));
    this.postRepositoryProvider = DoubleCheck.provider(PostRepository_Factory.create(connectionHelperProvider, connectionHelperProvider, connectionHelperProvider));
    this.authRepositoryProvider = DoubleCheck.provider(AuthRepository_Factory.create(connectionHelperProvider, connectionHelperProvider, connectionHelperProvider));
    this.settingsRepositoryProvider = DoubleCheck.provider(SettingsRepository_Factory.create(connectionHelperProvider, connectionHelperProvider, connectionHelperProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void inject(BaseActivity tmpActivity) {
  }

  @Override
  public void inject(MapAddressActivity addressActivity) {
    injectMapAddressActivity(addressActivity);
  }

  @Override
  public void inject(SplashFragment splashFragment) {
    injectSplashFragment(splashFragment);
  }

  @Override
  public void inject(OnBoardFragment onBoardFragment) {
    injectOnBoardFragment(onBoardFragment);
  }

  @Override
  public void inject(LoginFragment loginFragment) {
    injectLoginFragment(loginFragment);
  }

  @Override
  public void inject(ForgetPasswordFragment forgetPasswordFragment) {
    injectForgetPasswordFragment(forgetPasswordFragment);
  }

  @Override
  public void inject(ConfirmCodeFragment confirmCodeFragment) {
    injectConfirmCodeFragment(confirmCodeFragment);
  }

  @Override
  public void inject(ChangePasswordFragment changePasswordFragment) {
    injectChangePasswordFragment(changePasswordFragment);
  }

  @Override
  public void inject(RegisterFragment registerFragment) {
    injectRegisterFragment(registerFragment);
  }

  @Override
  public void inject(RegisterDocumentsFragment documentsFragment) {
    injectRegisterDocumentsFragment(documentsFragment);
  }

  @Override
  public void inject(RegisterServicesFragment registerServicesFragment) {
    injectRegisterServicesFragment(registerServicesFragment);
  }

  @Override
  public void inject(HomeFragment normalOrdersFragment) {
    injectHomeFragment(normalOrdersFragment);
  }

  @Override
  public void inject(NotificationsFragment notificationsFragment) {
    injectNotificationsFragment(notificationsFragment);
  }

  @Override
  public void inject(MyAccountSettingsFragment myAccountSettingsFragment) {
    injectMyAccountSettingsFragment(myAccountSettingsFragment);
  }

  @Override
  public void inject(EditProfileFragment profileFragment) {
    injectEditProfileFragment(profileFragment);
  }

  @Override
  public void inject(MyServicesOrdersFragment profileFragment) {
    injectMyServicesOrdersFragment(profileFragment);
  }

  @Override
  public void inject(ContactUsFragment contactUsFragment) {
    injectContactUsFragment(contactUsFragment);
  }

  @Override
  public void inject(LangFragment langFragment) {
    injectLangFragment(langFragment);
  }

  @Override
  public void inject(SocialMedia moreFragment) {
    injectSocialMedia(moreFragment);
  }

  @Override
  public void inject(CountriesFragment instructorFragment) {
    injectCountriesFragment(instructorFragment);
  }

  @Override
  public void inject(PackagesFragment newLiveFragment) {
    injectPackagesFragment(newLiveFragment);
  }

  @Override
  public void inject(AboutAppFragment aboutAppFragment) {
    injectAboutAppFragment(aboutAppFragment);
  }

  @Override
  public void inject(TermsFragment termsFragment) {
    injectTermsFragment(termsFragment);
  }

  @Override
  public void inject(AppWalletFragment appWalletFragment) {
    injectAppWalletFragment(appWalletFragment);
  }

  private HomeViewModels injectHomeViewModels(HomeViewModels instance) {
    HomeViewModels_MembersInjector.injectPostRepository(instance, postRepositoryProvider.get());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectViewModel(instance, homeViewModels());
    return instance;
  }

  private MapAddressActivity injectMapAddressActivity(MapAddressActivity instance) {
    MapAddressActivity_MembersInjector.injectMapAddressViewModel(instance, new MapAddressViewModel());
    return instance;
  }

  private SplashViewModel injectSplashViewModel(SplashViewModel instance) {
    SplashViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private SplashFragment injectSplashFragment(SplashFragment instance) {
    SplashFragment_MembersInjector.injectViewModel(instance, splashViewModel());
    return instance;
  }

  private OnBoardFragment injectOnBoardFragment(OnBoardFragment instance) {
    OnBoardFragment_MembersInjector.injectViewModel(instance, splashViewModel());
    return instance;
  }

  private LoginViewModel injectLoginViewModel(LoginViewModel instance) {
    LoginViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private LoginFragment injectLoginFragment(LoginFragment instance) {
    LoginFragment_MembersInjector.injectViewModel(instance, loginViewModel());
    return instance;
  }

  private ForgetPasswordViewModel injectForgetPasswordViewModel(ForgetPasswordViewModel instance) {
    ForgetPasswordViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private ForgetPasswordFragment injectForgetPasswordFragment(ForgetPasswordFragment instance) {
    ForgetPasswordFragment_MembersInjector.injectViewModel(instance, forgetPasswordViewModel());
    return instance;
  }

  private ConfirmViewModel injectConfirmViewModel(ConfirmViewModel instance) {
    ConfirmViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private ConfirmCodeFragment injectConfirmCodeFragment(ConfirmCodeFragment instance) {
    ConfirmCodeFragment_MembersInjector.injectViewModel(instance, confirmViewModel());
    return instance;
  }

  private ChangePasswordViewModel injectChangePasswordViewModel(ChangePasswordViewModel instance) {
    ChangePasswordViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private ChangePasswordFragment injectChangePasswordFragment(ChangePasswordFragment instance) {
    ChangePasswordFragment_MembersInjector.injectViewModel(instance, changePasswordViewModel());
    return instance;
  }

  private RegisterViewModel injectRegisterViewModel(RegisterViewModel instance) {
    RegisterViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
    RegisterFragment_MembersInjector.injectViewModel(instance, registerViewModel());
    return instance;
  }

  private RegisterDocumentsFragment injectRegisterDocumentsFragment(
      RegisterDocumentsFragment instance) {
    RegisterDocumentsFragment_MembersInjector.injectViewModel(instance, registerViewModel());
    return instance;
  }

  private RegisterServicesFragment injectRegisterServicesFragment(
      RegisterServicesFragment instance) {
    RegisterServicesFragment_MembersInjector.injectViewModel(instance, registerViewModel());
    return instance;
  }

  private HomeFragment injectHomeFragment(HomeFragment instance) {
    HomeFragment_MembersInjector.injectViewModel(instance, homeViewModels());
    return instance;
  }

  private NotificationsViewModels injectNotificationsViewModels(NotificationsViewModels instance) {
    NotificationsViewModels_MembersInjector.injectSettingsRepository(instance, settingsRepositoryProvider.get());
    return instance;
  }

  private NotificationsFragment injectNotificationsFragment(NotificationsFragment instance) {
    NotificationsFragment_MembersInjector.injectNotificationsViewModels(instance, notificationsViewModels());
    return instance;
  }

  private MyAccountSettingsViewModel injectMyAccountSettingsViewModel(
      MyAccountSettingsViewModel instance) {
    MyAccountSettingsViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private MyAccountSettingsFragment injectMyAccountSettingsFragment(
      MyAccountSettingsFragment instance) {
    MyAccountSettingsFragment_MembersInjector.injectViewModel(instance, myAccountSettingsViewModel());
    return instance;
  }

  private EditProfileViewModel injectEditProfileViewModel(EditProfileViewModel instance) {
    EditProfileViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private EditProfileFragment injectEditProfileFragment(EditProfileFragment instance) {
    EditProfileFragment_MembersInjector.injectViewModel(instance, editProfileViewModel());
    return instance;
  }

  private ProfileViewModels injectProfileViewModels(ProfileViewModels instance) {
    ProfileViewModels_MembersInjector.injectPostRepository(instance, postRepositoryProvider.get());
    return instance;
  }

  private MyServicesOrdersFragment injectMyServicesOrdersFragment(
      MyServicesOrdersFragment instance) {
    MyServicesOrdersFragment_MembersInjector.injectViewModel(instance, profileViewModels());
    return instance;
  }

  private SettingsViewModel injectSettingsViewModel(SettingsViewModel instance) {
    SettingsViewModel_MembersInjector.injectRepository(instance, settingsRepositoryProvider.get());
    return instance;
  }

  private ContactUsFragment injectContactUsFragment(ContactUsFragment instance) {
    ContactUsFragment_MembersInjector.injectViewModel(instance, settingsViewModel());
    return instance;
  }

  private LangFragment injectLangFragment(LangFragment instance) {
    LangFragment_MembersInjector.injectViewModel(instance, settingsViewModel());
    return instance;
  }

  private SocialMedia injectSocialMedia(SocialMedia instance) {
    SocialMedia_MembersInjector.injectViewModel(instance, myAccountSettingsViewModel());
    return instance;
  }

  private CountriesViewModel injectCountriesViewModel(CountriesViewModel instance) {
    CountriesViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private CountriesFragment injectCountriesFragment(CountriesFragment instance) {
    CountriesFragment_MembersInjector.injectViewModel(instance, countriesViewModel());
    return instance;
  }

  private PackagesViewModels injectPackagesViewModels(PackagesViewModels instance) {
    PackagesViewModels_MembersInjector.injectPostRepository(instance, postRepositoryProvider.get());
    return instance;
  }

  private PackagesFragment injectPackagesFragment(PackagesFragment instance) {
    PackagesFragment_MembersInjector.injectViewModel(instance, packagesViewModels());
    return instance;
  }

  private AboutAppFragment injectAboutAppFragment(AboutAppFragment instance) {
    AboutAppFragment_MembersInjector.injectViewModel(instance, settingsViewModel());
    return instance;
  }

  private TermsFragment injectTermsFragment(TermsFragment instance) {
    TermsFragment_MembersInjector.injectViewModel(instance, settingsViewModel());
    return instance;
  }

  private AppWalletViewModel injectAppWalletViewModel(AppWalletViewModel instance) {
    AppWalletViewModel_MembersInjector.injectSettingsRepository(instance, settingsRepositoryProvider.get());
    return instance;
  }

  private AppWalletFragment injectAppWalletFragment(AppWalletFragment instance) {
    AppWalletFragment_MembersInjector.injectViewModel(instance, appWalletViewModel());
    return instance;
  }

  private static final class Builder implements IApplicationComponent.Builder {
    @Override
    public IApplicationComponent build() {
      return new DaggerIApplicationComponent(new ConnectionModule());
    }
  }
}
