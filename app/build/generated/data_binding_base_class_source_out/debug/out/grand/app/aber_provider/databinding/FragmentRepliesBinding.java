// Generated by data binding compiler. Do not edit!
package grand.app.aber_provider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.helper.widget.Flow;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import androidx.recyclerview.widget.RecyclerView;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.textfield.TextInputEditText;
import com.makeramen.roundedimageview.RoundedImageView;
import de.hdodenhof.circleimageview.CircleImageView;
import grand.app.aber_provider.R;
import grand.app.aber_provider.customViews.views.CustomTextViewMedium;
import grand.app.aber_provider.customViews.views.CustomTextViewRegular;
import grand.app.aber_provider.pages.postDetails.viewModels.RepliesViewModel;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class FragmentRepliesBinding extends ViewDataBinding {
  @NonNull
  public final Barrier br;

  @NonNull
  public final CircleImageView commentImg;

  @NonNull
  public final Flow flow;

  @NonNull
  public final Flow flow1;

  @NonNull
  public final CustomTextViewRegular icClosePage;

  @NonNull
  public final AppCompatImageView icPostPickImg;

  @NonNull
  public final AppCompatImageView icSend;

  @NonNull
  public final CircleImageView imgHomeItem;

  @NonNull
  public final TextInputEditText inputText;

  @NonNull
  public final CardView itemComment;

  @NonNull
  public final CircularProgressIndicator loadMore;

  @NonNull
  public final RoundedImageView mainCommentImg;

  @NonNull
  public final NestedScrollView mainScroll;

  @NonNull
  public final CardView postItem;

  @NonNull
  public final ProgressBar progress;

  @NonNull
  public final RecyclerView rcComments;

  @NonNull
  public final ConstraintLayout sendContainer;

  @NonNull
  public final CustomTextViewRegular tvDescPost;

  @NonNull
  public final CustomTextViewMedium tvHomeItem;

  @NonNull
  public final CustomTextViewMedium tvPostComment;

  @NonNull
  public final CustomTextViewMedium tvPostLike;

  @Bindable
  protected RepliesViewModel mViewModel;

  protected FragmentRepliesBinding(Object _bindingComponent, View _root, int _localFieldCount,
      Barrier br, CircleImageView commentImg, Flow flow, Flow flow1,
      CustomTextViewRegular icClosePage, AppCompatImageView icPostPickImg,
      AppCompatImageView icSend, CircleImageView imgHomeItem, TextInputEditText inputText,
      CardView itemComment, CircularProgressIndicator loadMore, RoundedImageView mainCommentImg,
      NestedScrollView mainScroll, CardView postItem, ProgressBar progress, RecyclerView rcComments,
      ConstraintLayout sendContainer, CustomTextViewRegular tvDescPost,
      CustomTextViewMedium tvHomeItem, CustomTextViewMedium tvPostComment,
      CustomTextViewMedium tvPostLike) {
    super(_bindingComponent, _root, _localFieldCount);
    this.br = br;
    this.commentImg = commentImg;
    this.flow = flow;
    this.flow1 = flow1;
    this.icClosePage = icClosePage;
    this.icPostPickImg = icPostPickImg;
    this.icSend = icSend;
    this.imgHomeItem = imgHomeItem;
    this.inputText = inputText;
    this.itemComment = itemComment;
    this.loadMore = loadMore;
    this.mainCommentImg = mainCommentImg;
    this.mainScroll = mainScroll;
    this.postItem = postItem;
    this.progress = progress;
    this.rcComments = rcComments;
    this.sendContainer = sendContainer;
    this.tvDescPost = tvDescPost;
    this.tvHomeItem = tvHomeItem;
    this.tvPostComment = tvPostComment;
    this.tvPostLike = tvPostLike;
  }

  public abstract void setViewModel(@Nullable RepliesViewModel viewModel);

  @Nullable
  public RepliesViewModel getViewModel() {
    return mViewModel;
  }

  @NonNull
  public static FragmentRepliesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_replies, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static FragmentRepliesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<FragmentRepliesBinding>inflateInternal(inflater, R.layout.fragment_replies, root, attachToRoot, component);
  }

  @NonNull
  public static FragmentRepliesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_replies, null, false, component)
   */
  @NonNull
  @Deprecated
  public static FragmentRepliesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<FragmentRepliesBinding>inflateInternal(inflater, R.layout.fragment_replies, null, false, component);
  }

  public static FragmentRepliesBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static FragmentRepliesBinding bind(@NonNull View view, @Nullable Object component) {
    return (FragmentRepliesBinding)bind(component, view, R.layout.fragment_replies);
  }
}
