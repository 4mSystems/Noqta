// Generated by data binding compiler. Do not edit!
package te.app.notta.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.cardview.widget.CardView;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import androidx.recyclerview.widget.RecyclerView;
import java.lang.Deprecated;
import java.lang.Object;
import te.app.notta.R;
import te.app.notta.customViews.views.CustomTextViewMedium;
import te.app.notta.pages.points.viewModels.PointsViewModel;

public abstract class FragmentPointsBinding extends ViewDataBinding {
  @NonNull
  public final AppCompatImageView boardHeader;

  @NonNull
  public final CardView cardPoints;

  @NonNull
  public final AppCompatImageView icGifts;

  @NonNull
  public final RecyclerView rcPoints;

  @NonNull
  public final CustomTextViewMedium tvHomeUsername;

  @NonNull
  public final CustomTextViewMedium tvYourPoint1;

  @NonNull
  public final CustomTextViewMedium tvYourPoint2;

  @NonNull
  public final CustomTextViewMedium tvYourPoint3;

  @Bindable
  protected PointsViewModel mViewmodel;

  protected FragmentPointsBinding(Object _bindingComponent, View _root, int _localFieldCount,
      AppCompatImageView boardHeader, CardView cardPoints, AppCompatImageView icGifts,
      RecyclerView rcPoints, CustomTextViewMedium tvHomeUsername, CustomTextViewMedium tvYourPoint1,
      CustomTextViewMedium tvYourPoint2, CustomTextViewMedium tvYourPoint3) {
    super(_bindingComponent, _root, _localFieldCount);
    this.boardHeader = boardHeader;
    this.cardPoints = cardPoints;
    this.icGifts = icGifts;
    this.rcPoints = rcPoints;
    this.tvHomeUsername = tvHomeUsername;
    this.tvYourPoint1 = tvYourPoint1;
    this.tvYourPoint2 = tvYourPoint2;
    this.tvYourPoint3 = tvYourPoint3;
  }

  public abstract void setViewmodel(@Nullable PointsViewModel viewmodel);

  @Nullable
  public PointsViewModel getViewmodel() {
    return mViewmodel;
  }

  @NonNull
  public static FragmentPointsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_points, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static FragmentPointsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<FragmentPointsBinding>inflateInternal(inflater, R.layout.fragment_points, root, attachToRoot, component);
  }

  @NonNull
  public static FragmentPointsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_points, null, false, component)
   */
  @NonNull
  @Deprecated
  public static FragmentPointsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<FragmentPointsBinding>inflateInternal(inflater, R.layout.fragment_points, null, false, component);
  }

  public static FragmentPointsBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static FragmentPointsBinding bind(@NonNull View view, @Nullable Object component) {
    return (FragmentPointsBinding)bind(component, view, R.layout.fragment_points);
  }
}
